{"version":3,"sources":["../../dist/src/utils/Hash.js"],"names":["Object","defineProperty","exports","value","Math_1","require","hashString","str","hash","ii","length","charCodeAt","smi","murmurHashOfSize","size","h","imul","hashMerge","a","b"],"mappings":"AAAA;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,SAASC,QAAQ,QAAR,CAAf;AACA;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,QAAIC,OAAO,CAAX;AACA,SAAK,IAAIC,KAAK,CAAd,EAAiBA,KAAKF,IAAIG,MAA1B,EAAkCD,IAAlC,EAAwC;AACpCD,eAAO,KAAKA,IAAL,GAAYD,IAAII,UAAJ,CAAeF,EAAf,CAAZ,GAAiC,CAAxC;AACH;AACD,WAAOL,OAAOQ,GAAP,CAAWJ,IAAX,CAAP;AACH;AACDN,QAAQI,UAAR,GAAqBA,UAArB;AACA,SAASO,gBAAT,CAA0BC,IAA1B,EAAgCC,CAAhC,EAAmC;AAC/BA,QAAIX,OAAOY,IAAP,CAAYD,CAAZ,EAAe,UAAf,CAAJ;AACAA,QAAIX,OAAOY,IAAP,CAAYD,KAAK,EAAL,GAAUA,MAAM,CAAC,EAA7B,EAAiC,UAAjC,CAAJ;AACAA,QAAIX,OAAOY,IAAP,CAAYD,KAAK,EAAL,GAAUA,MAAM,CAAC,EAA7B,EAAiC,CAAjC,CAAJ;AACAA,QAAI,CAACA,IAAI,UAAJ,GAAiB,CAAlB,IAAuBD,IAA3B;AACAC,QAAIX,OAAOY,IAAP,CAAYD,IAAIA,MAAM,EAAtB,EAA0B,UAA1B,CAAJ;AACAA,QAAIX,OAAOY,IAAP,CAAYD,IAAIA,MAAM,EAAtB,EAA0B,UAA1B,CAAJ;AACAA,QAAIX,OAAOQ,GAAP,CAAWG,IAAIA,MAAM,EAArB,CAAJ;AACA,WAAOA,CAAP;AACH;AACDb,QAAQW,gBAAR,GAA2BA,gBAA3B;AACA,SAASI,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACrB,WAAOD,IAAIC,IAAI,UAAJ,IAAkBD,KAAK,CAAvB,KAA6BA,KAAK,CAAlC,CAAJ,GAA2C,CAAlD,CADqB,CACgC;AACxD;AACDhB,QAAQe,SAAR,GAAoBA,SAApB;AACA","file":"Hash.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Math_1 = require(\"./Math\");\n// http://jsperf.com/hashing-strings\nfunction hashString(str) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    let hash = 0;\n    for (let ii = 0; ii < str.length; ii++) {\n        hash = 31 * hash + str.charCodeAt(ii) | 0;\n    }\n    return Math_1.smi(hash);\n}\nexports.hashString = hashString;\nfunction murmurHashOfSize(size, h) {\n    h = Math_1.imul(h, 0xCC9E2D51);\n    h = Math_1.imul(h << 15 | h >>> -15, 0x1B873593);\n    h = Math_1.imul(h << 13 | h >>> -13, 5);\n    h = (h + 0xE6546B64 | 0) ^ size;\n    h = Math_1.imul(h ^ h >>> 16, 0x85EBCA6B);\n    h = Math_1.imul(h ^ h >>> 13, 0xC2B2AE35);\n    h = Math_1.smi(h ^ h >>> 16);\n    return h;\n}\nexports.murmurHashOfSize = murmurHashOfSize;\nfunction hashMerge(a, b) {\n    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0; // int\n}\nexports.hashMerge = hashMerge;\n//# sourceMappingURL=Hash.js.map"]}